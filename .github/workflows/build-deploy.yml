name: Build and Deploy Vue App

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'public/**'
      - 'vite.config.*'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'k8s/**'
      - '.github/workflows/**'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      manifests: ${{ steps.filter.outputs.manifests }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Filter paths
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'src/**'
              - 'public/**'
              - 'vite.config.*'
              - 'package.json'
              - 'pnpm-lock.yaml'
            manifests:
              - 'k8s/**'

  build-and-push:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract short SHA
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.EK_GITHUB_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.SHORT_SHA }}
            ghcr.io/${{ github.repository }}:latest

  deploy-k8s:
    needs: changes
    if: needs.changes.outputs.manifests == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Decode KUBECONFIG
        run: |
          echo "${{ secrets.kubecONFIG }}" | base64 --decode > kubeconfig
          chmod 600 kubeconfig

      - name: Apply K8s manifests
        run: kubectl --kubeconfig=kubeconfig apply -f k8s/
