name: Build and Deploy PhotoVault Frontend

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'vite.config.js'
      - 'index.html'
      - 'Dockerfile'
      - 'nginx.conf'
      - 'k8s/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'vite.config.js'
      - 'index.html'
      - 'Dockerfile'
      - 'nginx.conf'
      - 'k8s/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/ekskog/photovault-vue

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      app-changed: ${{ steps.changes.outputs.app }}
      k8s-changed: ${{ steps.changes.outputs.k8s }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect changes
      id: changes
      run: |
        # Get the list of changed files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare against the base branch
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        else
          # For pushes, compare against the previous commit
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          else
            # First commit to branch, check all files
            CHANGED_FILES=$(git ls-files)
          fi
        fi
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Check if app files changed
        APP_CHANGED=false
        K8S_CHANGED=false
        
        echo "$CHANGED_FILES" | while read -r file; do
          case "$file" in
            src/*|public/*|package*.json|vite.config.js|index.html|Dockerfile|nginx.conf)
              APP_CHANGED=true
              ;;
            k8s/*)
              K8S_CHANGED=true
              ;;
          esac
        done
        
        # Use a more reliable method to detect changes
        if echo "$CHANGED_FILES" | grep -E '^(src/|public/|package.*\.json$|vite\.config\.js$|index\.html$|Dockerfile$|nginx\.conf$)' > /dev/null; then
          APP_CHANGED=true
        fi
        
        if echo "$CHANGED_FILES" | grep -E '^k8s/' > /dev/null; then
          K8S_CHANGED=true
        fi
        
        echo "app=$APP_CHANGED" >> $GITHUB_OUTPUT
        echo "k8s=$K8S_CHANGED" >> $GITHUB_OUTPUT
        
        echo "App changed: $APP_CHANGED"
        echo "K8s changed: $K8S_CHANGED"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.app-changed == 'true' || needs.detect-changes.outputs.k8s-changed == 'true'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      if: needs.detect-changes.outputs.app-changed == 'true'
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      if: needs.detect-changes.outputs.app-changed == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      if: needs.detect-changes.outputs.app-changed == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      if: needs.detect-changes.outputs.app-changed == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
        
    - name: Verify cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes
        
    - name: Deploy to Kubernetes
      run: |
        echo "Starting deployment process..."
        
        # Always apply K8s manifests if they changed
        if [ "${{ needs.detect-changes.outputs.k8s-changed }}" = "true" ]; then
          echo "Applying updated Kubernetes manifests..."
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
        fi
        
        # Only update the image if app files changed
        if [ "${{ needs.detect-changes.outputs.app-changed }}" = "true" ]; then
          echo "Updating application image..."
          # Ensure deployment exists (apply manifests if not already done)
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          
          # Get the commit-specific tag from the build metadata
          COMMIT_TAG="${{ env.IMAGE_NAME }}:main-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "Using image tag: $COMMIT_TAG"
          
          # Update image in deployment with commit-specific tag
          kubectl set image deployment/photovault-vue photovault-vue=$COMMIT_TAG -n webapps
          
          # Restart deployment to ensure pods are recreated
          kubectl rollout restart deployment/photovault-vue -n webapps
          
          # Wait for rollout to complete
          kubectl rollout status deployment/photovault-vue -n webapps --timeout=300s
        else
          echo "No application changes detected, skipping image update"
          # Just ensure manifests are applied
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
        fi
        
    - name: Get service status
      run: |
        echo "=== Deployment Summary ==="
        echo "App files changed: ${{ needs.detect-changes.outputs.app-changed }}"
        echo "K8s files changed: ${{ needs.detect-changes.outputs.k8s-changed }}"
        if [ "${{ needs.detect-changes.outputs.app-changed }}" = "true" ]; then
          echo "‚úÖ New Docker image built and deployed"
        else
          echo "‚ÑπÔ∏è  No application changes - using existing image"
        fi
        
        echo ""
        echo "=== Current Deployment Status ==="
        kubectl get deployment photovault-vue -n webapps
        echo ""
        echo "=== Running Pods ==="
        kubectl get pods -l app=photovault-vue -n webapps
        echo ""
        echo "=== Service ==="
        kubectl get service photovault-vue-service -n webapps
        echo ""
        echo "=== External IP (MetalLB) ==="
        kubectl get service photovault-vue-service -n webapps -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
        
  skip-deployment:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.app-changed == 'false' && needs.detect-changes.outputs.k8s-changed == 'false'
    steps:
    - name: Skip deployment notification
      run: |
        echo "‚ÑπÔ∏è  No application or Kubernetes changes detected"
        echo "üìÅ Files that trigger builds: src/, public/, package*.json, vite.config.js, index.html, Dockerfile, nginx.conf, k8s/"
        echo "üöÄ Deployment skipped - no rebuild or redeployment needed"
