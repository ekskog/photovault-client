apiVersion: batch/v1
kind: CronJob
metadata:
  name: photovault-client-cleanup
  namespace: kube-system
spec:
  schedule: "30 2 * * *"  # Daily at 2:30 AM (offset from other cleanups)
  jobTemplate:
    spec:
      template:
        spec:
          hostNetwork: true
          hostPID: true
          volumes:
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock
          - name: containerd-sock
            hostPath:
              path: /run/k3s/containerd/containerd.sock
          containers:
          - name: cleanup
            image: docker:20.10
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting PhotoVault Frontend cleanup at $(date)"
              
              # Cleanup unused PhotoVault Frontend images older than 48h
              if command -v crictl >/dev/null 2>&1; then
                echo "Cleaning up old PhotoVault Frontend images..."
                crictl images | grep "photovault-client\|photovault-frontend" | awk '{print $3}' | while read img; do
                  # Get image creation time and remove if older than 48h
                  crictl rmi --prune
                done
              fi
              
              # Docker cleanup for PhotoVault Frontend images
              if command -v docker >/dev/null 2>&1; then
                echo "Docker cleanup for PhotoVault Frontend images..."
                # Remove unused PhotoVault Frontend images older than 48h
                docker images --filter "reference=*photovault-client*" --filter "until=48h" -q | xargs -r docker rmi -f
                docker images --filter "reference=*photovault-frontend*" --filter "until=48h" -q | xargs -r docker rmi -f
                docker system prune -f --filter "until=48h"
              fi
              
              # Log remaining PhotoVault Frontend images
              echo "Remaining PhotoVault Frontend images:"
              if command -v crictl >/dev/null 2>&1; then
                crictl images | grep -E "photovault-client|photovault-frontend" || echo "No PhotoVault Frontend images found"
              fi
              
              echo "PhotoVault Frontend cleanup completed at $(date)"
            volumeMounts:
            - name: docker-sock
              mountPath: /var/run/docker.sock
            - name: containerd-sock
              mountPath: /run/containerd/containerd.sock
            securityContext:
              privileged: true
          restartPolicy: OnFailure
          nodeSelector:
            node-role.kubernetes.io/master: "true"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
